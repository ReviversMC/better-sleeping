plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

// def mod_version = project.mod_version as Object
// version = "${mod_version}+${project.minecraft_version}"
archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

configurations {
    includeTransitive {
        transitive = true
    }
}


repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        url = "https://mvnrepository.com/"
    }
    if (project.use_third_party_mods) {
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
        maven {
            url = "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
    }
    maven {
        name = "NucleoidMC"
        url = "https://maven.nucleoid.xyz/"
    }
    mavenCentral()
}


dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API modules
    include modImplementation(fabricApi.module("fabric-api-base", project.fabric_version))
    include modImplementation(fabricApi.module("fabric-lifecycle-events-v1", project.fabric_version))

    // Apache Commons Text
    include implementation("org.apache.commons:commons-text:${project.commons_text_version}")

    compileOnly "com.github.spotbugs:spotbugs:${project.spotbugs_version}"


    if (project.use_third_party_mods) {
        configurations {
            modRuntimeOnly {
                transitive = true
                exclude module: "fabric-loader"
                exclude module: "fabric-api-base"
                exclude module: "fabric-lifecycle-events-v1"
            }
        }

        modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
        // modRuntimeOnly "fr.catcore:server-translations-api:${project.server_translations_version}"
        // modRuntimeOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
        // modRuntimeOnly "maven.modrinth:dynamic-fps:${project.dynamic_fps_version}"
        // modRuntimeOnly "maven.modrinth:ebe:${project.ebe_version}"
        // modRuntimeOnly "maven.modrinth:lazydfu:${project.lazydfu_version}"
        // modRuntimeOnly "maven.modrinth:lithium:${project.lithium_version}"
        // modRuntimeOnly "curse.maven:no-fade-452768:${project.no_fade_version}"
        // modRuntimeOnly "maven.modrinth:starlight:${project.starlight_version}"
        // modRuntimeOnly "maven.modrinth:resolution-control-plus:${project.resolution_control_version}"
        // modRuntimeOnly "curse.maven:resolution-control-plus-446974:3206545"
        // modRuntimeOnly "curse.maven:smooth-boot-415758:3248104"
        // modRuntimeOnly "maven.modrinth:smoothboot-fabric:${project.smoothboot_version}"
        // modRuntimeOnly "maven.modrinth:sodium:${project.sodium_version}"

        // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
        // You may need to force-disable transitiveness on them.
    }
}

project.afterEvaluate {
    configurations.includeTransitive.incoming.resolutionResult.allComponents {
        if (it.id instanceof ModuleComponentIdentifier) {
            def that = it
            dependencies {
                include group: that.id.getGroup(), name: that.id.getModule(), version: that.id.getVersion()
            }
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from "LICENSE"
}


// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // mavenLocal()	    // uncomment to publish to the local maven
    }
}
