plugins {
	id 'fabric-loom' apply false
	id 'io.github.juuxel.loom-quiltflower' apply false
	id 'checkstyle'
}


int width;
int height;

try {
	java.awt.GraphicsDevice gd = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
	width = Math.max(960, (int) (gd.getDisplayMode().getWidth() * 0.5));
	height = Math.max(480, (int) (gd.getDisplayMode().getHeight() * 0.5));
} catch (java.awt.HeadlessException e) {
	// Ignore
} catch (Throwable e) {
	e.printStackTrace()
}


subprojects {
	apply plugin: 'fabric-loom'
	apply plugin: 'io.github.juuxel.loom-quiltflower'
	apply plugin: 'checkstyle'

	checkstyle {
		configFile = rootProject.file('checkstyle.xml')
		toolVersion = project.checkstyle_version
	}


	version = rootProject.mod_version
	group = rootProject.maven_group
	archivesBaseName = rootProject.archives_base_name


	configurations {
		modRuntimeOnly {
			transitive = true
			exclude module: 'fabric-loader'
			exclude module: 'fabric-api-base'
		}
	}

	repositories {
		if (project.use_third_party_mods == 'true') {
			maven {
				name = 'Modrinth'
				url = 'https://api.modrinth.com/maven'
				content {
					includeGroup 'maven.modrinth'
				}
			}
			maven {
				url = 'https://cursemaven.com'
				content {
					includeGroup 'curse.maven'
				}
			}
		}
		maven {
			name = 'TerraformersMC'
			url = 'https://maven.terraformersmc.com/releases'
		}
		maven {
			url = 'https://maven.shedaniel.me/'
		}
		maven {
			name = 'JitPack'
			url = 'https://jitpack.io'
		}
		maven {
			name = 'NucleoidMC'
			url = 'https://maven.nucleoid.xyz/'
		}
		mavenCentral()
	}

	dependencies {
		modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
	}

	loom {
		runs {
			client {
				programArg '--width'
				programArg "$width"

				programArg '--height'
				programArg "$height"
			}
		}
	}


	processResources {
		inputs.property 'version', project.version

		filesMatching('fabric.mod.json') {
			expand 'version': project.version
		}
	}

	tasks.withType(JavaCompile).configureEach {
		// Ensure that the encoding is set to UTF-8, no matter what the system default is.
		// This fixes some edge cases with special characters not displaying correctly,
		// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html.
		// If Javadoc is generated, this must be specified in that task too.
		it.options.encoding = 'UTF-8'
	}

	java {
		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
		// if it is present. If you remove this line, sources will not be generated.
		withSourcesJar()

		// If this mod is going to be a library, then it should also generate Javadocs in order to aid
		// with development. Uncomment this line to generate them.
		// withJavadocJar()
	}

	jar {
		from rootProject.file('LICENSE')

		if (project.name != 'bettersleeping-core') {
			into "assets/${project.archivesBaseName}", {
				from rootProject.file('assets/icon.png')
			}
		}
	}
}
